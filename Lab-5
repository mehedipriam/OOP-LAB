 // Kunal Kushwaha 3rd video inheritence, overloading, overriding and oop slide 
=================Inheritance part ===========================

public class Main {
    public static void main(String[] args) {

        Box box = new Box();
        System.out.println("l :"+box.l+ " w :" +box.w+ " h:"+box.h);
        BoxWeight box2 = new BoxWeight();
        System.out.println("Parent (w) access child keyword: "+box2.w+" Child Weight: "+box2.weight); //here box2 child can access parent information
                                                    // but mother can not access child information

        System.out.println("Child h: "+box2.h+" Child Weight:"+box2.weight); //here child (h). If parent and child both side has (h) and
        System.out.println("Parent (h): ");
        box2.PrintDimensions(); // if we access parent (h) then we have to use super. we can't use super main file
                                // so we have to create method and print there just call here like this
    }
}

// Box.java 
public class Box {
    double l;
    double w;
    double h;

    //constructor
    Box(){
        this.l = 1;
        this.w = 1;
        this.h = 1;

    }
}
class BoxWeight extends Box {
        double weight;
        double h;

        BoxWeight() {
            super();
            this.weight = 5;
            this.h = 10;
        }
        void PrintDimensions(){
            System.out.println(super.h); // Prints the 'h' field from the parent class
        }
}

===================================Overloading ==========================
//Main.java

public class Main {
    public static void main(String[] args) {
        Box box2 = new Box();
        System.out.println("l :"+box2.l+ " w :" +box2.w+ " h:"+box2.h);

        Box box = new Box(10 , 5, 8);
        System.out.println("l :"+box.l+ " w :" +box.w+ " h:"+box.h);


    }
}
//Box.java

public class Box {
    double l;
    double w;
    double h;

    //constructor
    Box(){
        this.l = 1;
        this.w = 1;
        this.h = 1;

    }
    Box(double l, double w, double h) {   //When a class has the same name but different parameters like here Box() -> 0 parameter Box(10, 5, 8)-> here three parameters so this is called overloading
        this.l = l;
        this.w = w;
        this.h = h;
    }
}


Output: 
l :1.0 w :1.0 h:1.0
l :10.0 w :5.0 h:8.0

======================================Override======================
//main.java
public class Main {
    public static void main(String[] args) {
        Animal animal = new Animal();
        Animal animal2 = new Cat(); // here always check right part which is Cat() one

        animal.Name_of_Animal();
        animal2.Name_of_Animal();

    }
}
//Animal.java
public class Animal {

    void Name_of_Animal(){
        System.out.println("Dog. I am parent class");
    }
}
class Cat extends Animal{
    @Override // using it just for check
    void Name_of_Animal(){
        System.out.println("Cat. I am extends class of Animal.");
    }
}
//both side has same name like here [ Name_of_Animal() ] then override work otherwise that doesn't call override





============================= slide Code ====================================

public class Main {
    public static void main(String args[]) {
        Child example = new Child();
        example.childMethod();
        example.parentMethod();
        System.out.println(example.parentVariable);
    }
}

//Parent.java 

class Parent {
    public int parentVariable = 10;

    public void parentMethod() {
        System.out.println("Parent Method");
    }
}

class Child extends Parent {
    public int childVariable = 5;

    public void childMethod() {
        parentMethod();
        System.out.println(parentVariable+ " " +childVariable);
    }
}

================================== ==================================

